{
  "version": 3,
  "sources": ["browser-route-module:/Users/hamza/Documents/Repos/smart-contract-ui/app/routes/contract.tsx?browser", "../../../app/routes/contract.tsx"],
  "sourcesContent": ["export { default } from \"/Users/hamza/Documents/Repos/smart-contract-ui/app/routes/contract.tsx\";", "import { ActionFunction, json } from '@remix-run/node';\nimport { useActionData } from '@remix-run/react';\nimport { FC, useState } from 'react';\nimport Web3 from 'web3';\n\nexport const action: ActionFunction = async ({ request }) => {\n    const form = await request.formData();\n\n    const rpcUrl = form.get('rpc-url');\n    const privateKey = form.get('private-key');\n    const contractAbi = form.get('contract-abi');\n    const contractAddress = form.get('contract-address');\n\n    return json({ rpcUrl, contractAbi, contractAddress, privateKey });\n};\n\nexport default function Contract() {\n    const data = useActionData();\n\n    // const contractTransaction = async (\n    //     call: boolean,\n    //     method: string,\n    //     args?: any[]\n    // ) => {\n    //     const { contractAbi, contractAddress, rpcUrl, privateKey } = data;\n\n    //     const provider = new Web3.providers.HttpProvider(rpcUrl);\n    //     const web3 = new Web3(provider);\n\n    //     const contract = new web3.eth.Contract(contractAbi, contractAddress);\n\n    //     const publicKey = web3.eth.accounts.privateKeyToAccount(\n    //         privateKey,\n    //         true\n    //     ).address;\n\n    //     if (call) {\n    //         // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //         // @ts-ignore\n    //         return await contract.methods[method](...args).call();\n    //     }\n\n    //     // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //     // @ts-ignore\n    //     const tx = await contract.methods[method](...args);\n    //     const gas = await tx.estimateGas({ from: publicKey });\n    //     const gasPrice = await web3.eth.getGasPrice();\n    //     const txData = tx.encodeABI();\n    //     // const nonce = await web3.eth.getTransactionCount(account_address);\n    //     const signedTx = await web3.eth.accounts.signTransaction(\n    //         {\n    //             to: contract.options.address,\n    //             data: txData,\n    //             gas,\n    //             gasPrice,\n    //             // nonce: '0x' + nonce.toString(16)\n    //         },\n    //         privateKey\n    //     );\n\n    //     const receipt = await web3.eth.sendSignedTransaction(\n    //         // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //         // @ts-ignore\n    //         signedTx.rawTransaction\n    //     );\n\n    //     return receipt;\n    // };\n\n    return (\n        <div style={{ fontFamily: 'system-ui, sans-serif', lineHeight: '1.4' }}>\n            {data &&\n                data.contractAbi.map((item: any, key: number) => {\n                    switch (item.type) {\n                        case 'function':\n                            return (\n                                <ContractFunction\n                                    name={item.name}\n                                    args={item.inputs}\n                                    onSubmit={(value) => ''\n                                        // contractTransaction(\n                                        //     item.stateMutability === 'view',\n                                        //     item.name,\n                                        //     item.inputs.reduce((acc: any[], curr: any) => {\n                                        //         const v = value[curr.name];\n                                        //         acc.push(v);\n                                        //         return acc;\n                                        //     }, [])\n                                        // )\n                                    }\n                                />\n                            );\n                        default:\n                            return null;\n                    }\n                })}\n        </div>\n    );\n}\n\nconst ContractFunction: FC<{\n    name: string;\n    args: { name: string; type: string }[];\n    onSubmit: (value: any) => void;\n}> = ({ name, args, onSubmit }) => {\n    const [state, setState] = useState({});\n\n    return (\n        <div>\n            <h3>{name}</h3>\n            {args.map((item, key) => (\n                <label key={key}>\n                    {item.name} ({item.type})\n                    <input\n                        type='text'\n                        onChange={(e) =>\n                            setState((prev) => ({\n                                ...prev,\n                                [item.name]: e.target.value,\n                            }))\n                        }\n                    />\n                </label>\n            ))}\n            <button onClick={() => onSubmit(state)}>Submit</button>\n        </div>\n    );\n};\n"],
  "mappings": ";;;;;;;;;AAAA;;;ACAA;AAEA,oBAA6B;AAcd,oBAAoB;AAC/B,QAAM,OAAO;AAoDb,SACI,oCAAC,OAAD;AAAA,IAAK,OAAO,EAAE,YAAY,yBAAyB,YAAY;AAAA,KAC1D,QACG,KAAK,YAAY,IAAI,CAAC,MAAW,QAAgB;AAC7C,YAAQ,KAAK;AAAA,WACJ;AACD,eACI,oCAAC,kBAAD;AAAA,UACI,MAAM,KAAK;AAAA,UACX,MAAM,KAAK;AAAA,UACX,UAAU,CAAC,UAAU;AAAA;AAAA;AAc7B,eAAO;AAAA;AAAA;AAAA;AAOnC,IAAM,mBAID,CAAC,EAAE,MAAM,MAAM,eAAe;AAC/B,QAAM,CAAC,OAAO,YAAY,4BAAS;AAEnC,SACI,oCAAC,OAAD,MACI,oCAAC,MAAD,MAAK,OACJ,KAAK,IAAI,CAAC,MAAM,QACb,oCAAC,SAAD;AAAA,IAAO;AAAA,KACF,KAAK,MAAK,MAAG,KAAK,MAAK,KACxB,oCAAC,SAAD;AAAA,IACI,MAAK;AAAA,IACL,UAAU,CAAC,MACP,SAAS,CAAC,SAAU;AAAA,SACb;AAAA,OACF,KAAK,OAAO,EAAE,OAAO;AAAA;AAAA,QAM1C,oCAAC,UAAD;AAAA,IAAQ,SAAS,MAAM,SAAS;AAAA,KAAQ;AAAA;",
  "names": []
}
